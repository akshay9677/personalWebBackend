{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","path","app","PORT","process","env","use","bodyParser","json","urlencoded","extended","post","req","res","next","body","name","email","description","params","Users","create","user","status","data","error","message","Likes","find","id","likeData","_id","likes","sysModifiedTime","Date","getTime","findOneAndUpdate","like","get","Blog","blogPosts","subject","tags","newPost","sysCreatedTime","blogPost","put","blog","editPost","listen","console","log"],"mappings":"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","sourcesContent":["import \"@babel/polyfill\";\nimport express from \"express\";\nimport dotenv from \"dotenv\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport { connectDB } from \"./config/db\";\nimport Users from \"./models/Users.model\";\nimport Likes from \"./models/Likes.model\";\nimport Blog from \"./models/Blog.model\";\n\ndotenv.config({ path: \"./src/config/config.env\" });\nconnectDB();\nconst app = express();\n\nconst PORT = process.env.PORT || 5000;\n\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post(\"/api/v1/users\", async (req, res, next) => {\n  try {\n    const { name, email, description } = req.body;\n    let params = {\n      name: name,\n      email: email,\n      description: description,\n    };\n    const user = await Users.create(params);\n    return res.status(200).json({\n      data: \"Added user to newsletter\",\n      error: null,\n    });\n  } catch (e) {\n    return res.status(500).json({\n      error: e.message,\n      data: null,\n    });\n  }\n});\n\napp.post(\"/api/v1/likes\", async (req, res, next) => {\n  try {\n    const likeData = await Likes.find({ id: \"#akshay.personal.web\" });\n    let { _id } = likeData[0];\n    likeData[0].likes = likeData[0].likes + 1;\n    likeData[0].sysModifiedTime = new Date().getTime();\n\n    const like = await Likes.findOneAndUpdate({ _id: _id }, likeData[0]);\n\n    return res.status(200).json({\n      data: \"Updated Likes\",\n      error: null,\n    });\n  } catch (e) {\n    return res.status(500).json({\n      error: e.message,\n      data: null,\n    });\n  }\n});\n\napp.get(\"/api/v1/likes\", async (req, res, next) => {\n  try {\n    const likeData = await Likes.find({ id: \"#akshay.personal.web\" });\n\n    return res.status(200).json({\n      data: likeData,\n      error: null,\n    });\n  } catch (e) {\n    return res.status(500).json({\n      error: e.message,\n      data: null,\n    });\n  }\n});\n\napp.get(\"/api/v1/blog\", async (req, res, next) => {\n  try {\n    const blogPosts = await Blog.find();\n\n    return res.status(200).json({\n      data: blogPosts,\n      error: null,\n    });\n  } catch (e) {\n    return res.status(500).json({\n      error: e.message,\n      data: null,\n    });\n  }\n});\n\napp.post(\"/api/v1/blog\", async (req, res, next) => {\n  try {\n    let { email, subject, post, tags } = req.body;\n\n    let newPost = { email, subject, post, tags };\n    newPost.sysCreatedTime = new Date().getTime();\n    newPost.likes = 0;\n    newPost.tags = newPost.tags ? newPost.tags : [];\n\n    await Blog.create(newPost);\n\n    return res.status(200).json({\n      data: newPost,\n      error: null,\n    });\n  } catch (e) {\n    return res.status(500).json({\n      error: e.message,\n      data: null,\n    });\n  }\n});\n\napp.post(\"/api/v1/blog/summary\", async (req, res, next) => {\n  try {\n    let { _id } = req.body;\n    const blogPost = await Blog.find({ _id: _id });\n\n    return res.status(200).json({\n      data: blogPost[0],\n      error: null,\n    });\n  } catch (e) {\n    return res.status(500).json({\n      error: e.message,\n      data: null,\n    });\n  }\n});\n\napp.put(\"/api/v1/blog/like\", async (req, res) => {\n  try {\n    let blog = req.body;\n    const { _id } = blog;\n    blog.likes += 1;\n    let editPost = await Blog.findOneAndUpdate({ _id: _id }, blog);\n    return res.status(200).json({\n      data: blog,\n      error: null,\n    });\n  } catch (e) {\n    return res.status(500).json({\n      error: e.message,\n      data: null,\n    });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server started at port ${PORT}`);\n});\n"],"file":"app.js"}